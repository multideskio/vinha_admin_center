'use client'

import * as React from 'react'
import { z } from 'zod'
import { useForm, useWatch } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { Banknote, CreditCard, QrCode, DollarSign, CheckCircle, Loader2 } from 'lucide-react'
import Image from 'next/image'
import Cards, { Focused } from 'react-credit-cards-2'
import 'react-credit-cards-2/dist/es/styles-compiled.css'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form'
import { cn } from '@/lib/utils'
import { Separator } from '@/components/ui/separator'
import { useToast } from '@/hooks/use-toast'
import { Skeleton } from '@/components/ui/skeleton'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'

const contributionSchema = z.object({
  amount: z.coerce.number().min(1, 'O valor deve ser maior que zero.'),
  paymentMethod: z.enum(['pix', 'credit_card', 'boleto'], {
    required_error: 'Selecione um método de pagamento.',
  }),
  contributionType: z.enum(['dizimo', 'oferta'], {
    required_error: 'O tipo de contribuição é obrigatório.',
  }),
  description: z.string().optional(),
  card: z
    .object({
      number: z.string(),
      holder: z.string(),
      expirationDate: z.string(),
      securityCode: z.string(),
      brand: z.string(),
    })
    .optional(),
})

type ContributionFormValues = z.infer<typeof contributionSchema>

type CieloPaymentResponse = {
  QrCodeBase64Image?: string
  QrCodeString?: string
  DigitableLine?: string
  Url?: string
  PaymentId?: string
}

export default function ContribuicoesPage() {
  const [currentStep, setCurrentStep] = React.useState(1)
  const [paymentDetails, setPaymentDetails] = React.useState<CieloPaymentResponse | null>(null)
  const [transactionId, setTransactionId] = React.useState<string | null>(null)
  const [isProcessing, setIsProcessing] = React.useState(false)
  const [pixStatus, setPixStatus] = React.useState<'idle' | 'pending' | 'confirmed' | 'expired'>('idle')
  const [showPaymentDetails, setShowPaymentDetails] = React.useState(false)
  const [pixCountdown, setPixCountdown] = React.useState(180) // 3 minutos em segundos
  const [cardState, setCardState] = React.useState({
    number: '',
    expiry: '',
    cvc: '',
    name: '',
    focus: '' as Focused,
  })

  const { toast } = useToast()

  const form = useForm<ContributionFormValues>({
    resolver: zodResolver(contributionSchema),
    defaultValues: {
      paymentMethod: 'pix',
      amount: 0,
      contributionType: undefined,
      description: '',
    },
  })

  const paymentMethod = useWatch({
    control: form.control,
    name: 'paymentMethod',
  })

  const amount = useWatch({
    control: form.control,
    name: 'amount',
  })

  const handleCopy = (code: string | undefined, type: string) => {
    if (!code) return
    navigator.clipboard.writeText(code)
    toast({
      title: 'Copiado!',
      description: `Código do ${type} copiado com sucesso.`,
    })
  }

  React.useEffect(() => {
    setShowPaymentDetails(false)
    setPaymentDetails(null)
    setTransactionId(null)
    setPixStatus('idle')
    setPixCountdown(180)
    // Volta para o passo 1 quando mudar método de pagamento ou valor
    setCurrentStep(1)
  }, [paymentMethod, amount])

  React.useEffect(() => {
    let timer: NodeJS.Timeout
    let attempts = 0
    const maxAttempts = 25 // Máximo de 25 tentativas (cerca de 4 minutos)
    
    const checkPaymentStatus = async () => {
      if (!paymentDetails || !transactionId || paymentMethod !== 'pix' || pixStatus !== 'pending') {
        return
      }
      
      try {
        const res = await fetch(`/api/v1/transacoes/${transactionId}`)
        const data = await res.json()
        
        if (data.transaction?.Payment?.Status === 2) {
          setPixStatus('confirmed')
          setCurrentStep(3)
          toast({
            title: 'Sucesso!',
            description: 'Pagamento via Pix confirmado com sucesso.',
            variant: 'success',
          })
          return
        }
        
        // Se ainda não foi confirmado e não atingiu o máximo de tentativas
        attempts++
        if (attempts < maxAttempts && pixStatus === 'pending') {
          // Backoff exponencial: começa com 8s, aumenta gradualmente
          const delay = Math.min(8000 + (attempts * 2000), 15000) // Max 15s entre tentativas
          timer = setTimeout(checkPaymentStatus, delay)
        }
      } catch (error) {
        console.error('Falha ao verificar status do Pix:', error)
        // Em caso de erro, tenta novamente se não atingiu o máximo
        attempts++
        if (attempts < maxAttempts && pixStatus === 'pending') {
          // Espera mais tempo em caso de erro
          const delay = Math.min(12000 + (attempts * 3000), 20000) // Max 20s após erro
          timer = setTimeout(checkPaymentStatus, delay)
        }
      }
    }
    
    if (paymentDetails && paymentMethod === 'pix' && pixStatus === 'pending') {
      // Primeira verificação após 10 segundos (dá mais tempo para a Cielo processar)
      timer = setTimeout(checkPaymentStatus, 10000)
    }
    
    return () => clearTimeout(timer)
  }, [paymentDetails, paymentMethod, pixStatus, toast])

  // Countdown do PIX (3 minutos)
  React.useEffect(() => {
    let interval: NodeJS.Timeout
    if (paymentMethod === 'pix' && pixStatus === 'pending' && pixCountdown > 0) {
      interval = setInterval(() => {
        setPixCountdown((prev) => {
          if (prev <= 1) {
            setPixStatus('expired')
            return 0
          }
          return prev - 1
        })
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [paymentMethod, pixStatus, pixCountdown])

  // Toast quando PIX expira (separado para evitar erro de render)
  React.useEffect(() => {
    if (pixStatus === 'expired') {
      toast({
        title: 'Tempo Esgotado',
        description: 'O tempo para pagamento via PIX expirou. Gere um novo código.',
        variant: 'destructive',
      })
    }
  }, [pixStatus, toast])

  // Reset countdown quando iniciar novo PIX
  React.useEffect(() => {
    if (paymentMethod === 'pix' && pixStatus === 'pending') {
      setPixCountdown(180) // Reset para 3 minutos
    }
  }, [paymentMethod, pixStatus])

  const formatCountdown = (seconds: number) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const checkPaymentManually = async () => {
    if (!paymentDetails || !transactionId) return
    
    setIsProcessing(true)
    try {
      // Faz múltiplas tentativas com intervalo menor para verificação manual
      let attempts = 0
      const maxAttempts = 3
      
      while (attempts < maxAttempts) {
        const res = await fetch(`/api/v1/transacoes/${transactionId}`)
        const data = await res.json()
        
        if (data.transaction?.Payment?.Status === 2) {
          setPixStatus('confirmed')
          setCurrentStep(3)
          toast({
            title: 'Sucesso!',
            description: 'Pagamento via Pix confirmado com sucesso.',
            variant: 'success',
          })
          return
        }
        
        attempts++
        if (attempts < maxAttempts) {
          // Aguarda 2 segundos entre tentativas
          await new Promise(resolve => setTimeout(resolve, 2000))
        }
      }
      
      // Se chegou aqui, não conseguiu confirmar
      toast({
        title: 'Ainda Pendente',
        description: 'Pagamento ainda não foi confirmado pela Cielo. Aguarde alguns instantes e tente novamente.',
        variant: 'default',
      })
    } catch (error) {
      console.error('Erro ao verificar pagamento:', error)
      toast({
        title: 'Erro na Verificação',
        description: 'Problema temporário na consulta à Cielo. Tente novamente em alguns instantes.',
        variant: 'destructive',
      })
    } finally {
      setIsProcessing(false)
    }
  }

  const handleInputChange = (evt: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = evt.target
    let formattedValue = value

    if (name === 'number') {
      formattedValue = value.replace(/\D/g, '').slice(0, 16)
    } else if (name === 'expiry') {
      formattedValue = value
        .replace(/\D/g, '')
        .replace(/(\d{2})(\d)/, '$1/$2')
        .slice(0, 5) // MM/YY
    } else if (name === 'cvc') {
      formattedValue = value.replace(/\D/g, '').slice(0, 4)
    }

    setCardState((prev) => ({ ...prev, [name]: formattedValue }))
  }

  const handleInputFocus = (evt: React.FocusEvent<HTMLInputElement>) => {
    setCardState((prev) => ({ ...prev, focus: evt.target.name as Focused }))
  }

  async function handleFormSubmit(data: ContributionFormValues): Promise<void> {
    // Avança para o passo 2 (Pagamento)
    setCurrentStep(2)
    
    if (data.paymentMethod === 'credit_card') {
      setShowPaymentDetails(true)
      return
    }

    setIsProcessing(true)
    setPaymentDetails(null)
    try {
      const payload = { ...data }
      const response = await fetch('/api/v1/transacoes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      })
      const result = await response.json()
      if (!response.ok) {
        throw new Error(result.error || 'Falha ao processar o pagamento.')
      }
      setPaymentDetails(result.data)
      setTransactionId(result.transaction?.id || null)
      setShowPaymentDetails(true)
      if (data.paymentMethod === 'pix') {
        setPixStatus('pending')
      }
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido'
      toast({
        title: 'Erro no Pagamento',
        description: errorMessage,
        variant: 'destructive',
      })
    } finally {
      setIsProcessing(false)
    }
  }

  const handleFinalizeCardPayment = async () => {
    const contributionData = form.getValues()
    const payload = {
      ...contributionData,
      card: {
        number: cardState.number,
        holder: cardState.name,
        expirationDate: cardState.expiry,
        securityCode: cardState.cvc,
        brand: 'Visa',
      },
    }
    setIsProcessing(true)
    try {
      const response = await fetch('/api/v1/transacoes', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      })
      const result = await response.json()
      if (!response.ok) {
        throw new Error(result.error || 'Falha ao processar o pagamento com cartão.')
      }
      // Avança para o passo 3 (Confirmação)
      setCurrentStep(3)
      toast({
        title: 'Sucesso!',
        description: 'Pagamento com cartão aprovado.',
        variant: 'success',
      })
      form.reset({ amount: 0, paymentMethod: 'pix', contributionType: undefined, description: '' })
      setCardState({ number: '', expiry: '', cvc: '', name: '', focus: '' })
      setShowPaymentDetails(false)
      setPaymentDetails(null)
      setTransactionId(null)
      setCurrentStep(1)
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido'
      toast({ title: 'Erro no Pagamento', description: errorMessage, variant: 'destructive' })
    } finally {
      setIsProcessing(false)
    }
  }

  const getButtonLabel = () => {
    switch (paymentMethod) {
      case 'pix':
        return 'Continuar com PIX'
      case 'credit_card':
        return 'Continuar com Cartão'
      case 'boleto':
        return 'Continuar com Boleto'
      default:
        return 'Prosseguir com Segurança'
    }
  }

  const getFullQrCodeSrc = () => {
    if (!paymentDetails?.QrCodeBase64Image) {
      return null
    }
    if (paymentDetails.QrCodeBase64Image.startsWith('data:image/png;base64,')) {
      return paymentDetails.QrCodeBase64Image
    }
    return `data:image/png;base64,${paymentDetails.QrCodeBase64Image}`
  }

  const qrCodeSrc = getFullQrCodeSrc()

  return (
    <div className="flex flex-col gap-4 max-w-6xl mx-auto">
      {/* Indicador de Progresso */}
      <div className="max-w-sm mx-auto w-full mb-2">
        <div className="flex items-center justify-between text-xs">
          <div className="flex items-center gap-1">
            <div className={cn(
              "w-6 h-6 rounded-full flex items-center justify-center font-semibold text-xs",
              currentStep >= 1 ? "bg-primary text-primary-foreground" : "bg-muted text-muted-foreground"
            )}>
              1
            </div>
            <span className={cn(currentStep >= 1 ? "font-medium" : "text-muted-foreground")}>Dados</span>
          </div>
          <div className={cn("flex-1 h-px mx-2", currentStep >= 2 ? "bg-primary" : "bg-muted")}></div>
          <div className="flex items-center gap-1">
            <div className={cn(
              "w-6 h-6 rounded-full flex items-center justify-center font-semibold text-xs",
              currentStep >= 2 ? "bg-primary text-primary-foreground" : "bg-muted text-muted-foreground"
            )}>
              2
            </div>
            <span className={cn(currentStep >= 2 ? "font-medium" : "text-muted-foreground")}>Pagamento</span>
          </div>
          <div className={cn("flex-1 h-px mx-2", currentStep >= 3 ? "bg-primary" : "bg-muted")}></div>
          <div className="flex items-center gap-1">
            <div className={cn(
              "w-6 h-6 rounded-full flex items-center justify-center font-semibold text-xs",
              currentStep >= 3 ? "bg-primary text-primary-foreground" : "bg-muted text-muted-foreground"
            )}>
              3
            </div>
            <span className={cn(currentStep >= 3 ? "font-medium" : "text-muted-foreground")}>Confirmação</span>
          </div>
        </div>
      </div>

      <div className="text-center space-y-1">
        <div className="flex items-center justify-center gap-2">
          <div className="bg-primary/10 p-2 rounded-full">
            <DollarSign className="h-6 w-6 text-primary" />
          </div>
          <div>
            <h1 className="text-2xl font-bold tracking-tight text-foreground">Contribuição Segura</h1>
            <div className="flex items-center gap-1 text-xs text-muted-foreground">
              <svg className="h-3 w-3 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
              </svg>
              <span>Ambiente 100% seguro</span>
            </div>
          </div>
        </div>
        <p className="text-sm text-muted-foreground max-w-xl mx-auto">
          Realize sua contribuição de forma segura através de nosso sistema protegido.
        </p>
      </div>

      <Card>
        <CardHeader className="pb-4">
          <div className="flex items-center justify-between">
            <div className="flex-1">
              <CardTitle className="flex items-center gap-2 text-lg">
                {!showPaymentDetails ? (
                  <>
                    <DollarSign className="h-4 w-4" />
                    Dados da Contribuição
                  </>
                ) : (
                  <>
                    {paymentMethod === 'pix' && <QrCode className="h-4 w-4" />}
                    {paymentMethod === 'credit_card' && <CreditCard className="h-4 w-4" />}
                    {paymentMethod === 'boleto' && <Banknote className="h-4 w-4" />}
                    {paymentMethod === 'pix' && 'Pagamento via PIX'}
                    {paymentMethod === 'credit_card' && 'Pagamento com Cartão'}
                    {paymentMethod === 'boleto' && 'Pagamento via Boleto'}
                  </>
                )}
              </CardTitle>
              <CardDescription className="text-sm mt-1">
                {!showPaymentDetails 
                  ? "Preencha os dados e escolha o método de pagamento"
                  : paymentMethod === 'pix' 
                    ? "Escaneie o QR Code ou copie a chave PIX para finalizar o pagamento"
                    : paymentMethod === 'credit_card'
                      ? "Preencha os dados do seu cartão para finalizar o pagamento"
                      : "Seu boleto foi gerado com sucesso. Você pode baixar o PDF ou copiar o código de barras."
                }
              </CardDescription>
            </div>
            {showPaymentDetails && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setShowPaymentDetails(false)
                  setPaymentDetails(null)
                  setTransactionId(null)
                  setPixStatus('idle')
                  setCurrentStep(1)
                }}
                className="flex items-center gap-2"
              >
                <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Voltar
              </Button>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {!showPaymentDetails ? (
            <Form {...form}>
              <form onSubmit={form.handleSubmit(handleFormSubmit)} className="space-y-8">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Seção de Informações da Contribuição */}
                <div className="space-y-4">
                  <div>
                    <h3 className="font-semibold mb-1">Dados da Contribuição</h3>
                    <p className="text-xs text-muted-foreground">Preencha as informações</p>
                  </div>
                  <FormField
                    control={form.control}
                    name="amount"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-base font-medium">Valor da Contribuição *</FormLabel>
                        <FormControl>
                          <div className="relative">
                            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground font-medium">
                              R$
                            </span>
                            <Input
                              type="number"
                              placeholder="0,00"
                              className="pl-10 text-lg font-medium"
                              min="1"
                              step="0.01"
                              {...field}
                            />
                          </div>
                        </FormControl>
                        <p className="text-xs text-muted-foreground">
                          Valor mínimo: R$ 1,00
                        </p>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="contributionType"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-base font-medium">Tipo de Contribuição *</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger className="h-11">
                              <SelectValue placeholder="Selecione o tipo de contribuição" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="dizimo">
                              <div className="flex flex-col">
                                <span className="font-medium">Dízimo</span>
                                <span className="text-xs text-muted-foreground">10% da renda</span>
                              </div>
                            </SelectItem>
                            <SelectItem value="oferta">
                              <div className="flex flex-col">
                                <span className="font-medium">Oferta</span>
                                <span className="text-xs text-muted-foreground">Contribuição voluntária</span>
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-base font-medium">Descrição (Opcional)</FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="Ex: Dízimo do mês de outubro, Oferta para missões, etc..."
                            className="min-h-[80px] resize-none"
                            {...field}
                          />
                        </FormControl>
                        <p className="text-xs text-muted-foreground">
                          Adicione uma descrição para identificar melhor sua contribuição
                        </p>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Seção de Métodos de Pagamento */}
                <div className="space-y-4">
                  <div>
                    <h3 className="font-semibold mb-1">Método de Pagamento</h3>
                    <p className="text-xs text-muted-foreground">Escolha como deseja contribuir</p>
                  </div>
                  <FormField
                    control={form.control}
                    name="paymentMethod"
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <RadioGroup
                            onValueChange={field.onChange}
                            defaultValue={field.value}
                            className="space-y-3"
                          >
                            <Label
                              className={cn(
                                'flex items-center gap-3 rounded-lg border-2 border-muted bg-card p-3 hover:bg-accent hover:text-accent-foreground cursor-pointer transition-all duration-200 hover:shadow-md',
                                field.value === 'pix' && 'border-primary bg-primary/5 shadow-sm ring-1 ring-primary/20',
                              )}
                            >
                              <RadioGroupItem value="pix" />
                              <QrCode className="h-8 w-8 text-primary flex-shrink-0" />
                              <div className="flex-1">
                                <div className="flex items-center gap-2">
                                  <span className="font-semibold">PIX</span>
                                  <span className="bg-green-100 text-green-800 text-xs px-2 py-0.5 rounded-full">
                                    Recomendado
                                  </span>
                                </div>
                                <p className="text-xs text-muted-foreground mt-0.5">
                                  Instantâneo e gratuito
                                </p>
                              </div>
                              <div className="text-right text-xs">
                                <div className="font-medium text-green-600">Grátis</div>
                              </div>
                            </Label>
                            <Label
                              className={cn(
                                'flex items-center gap-3 rounded-lg border-2 border-muted bg-card p-3 hover:bg-accent hover:text-accent-foreground cursor-pointer transition-all duration-200 hover:shadow-md',
                                field.value === 'credit_card' && 'border-primary bg-primary/5 shadow-sm ring-1 ring-primary/20',
                              )}
                            >
                              <RadioGroupItem value="credit_card" />
                              <CreditCard className="h-8 w-8 text-primary flex-shrink-0" />
                              <div className="flex-1">
                                <div className="flex items-center gap-2">
                                  <span className="font-semibold">Cartão de Crédito</span>
                                  <div className="flex gap-1">
                                    <div className="w-5 h-3 bg-blue-600 rounded text-white text-xs flex items-center justify-center font-bold">V</div>
                                    <div className="w-5 h-3 bg-red-600 rounded text-white text-xs flex items-center justify-center font-bold">M</div>
                                  </div>
                                </div>
                                <p className="text-xs text-muted-foreground mt-0.5">
                                  Parcelamento disponível
                                </p>
                              </div>
                              <div className="text-right text-xs">
                                <div className="font-medium">até 12x</div>
                              </div>
                            </Label>
                            <Label
                              className={cn(
                                'flex items-center gap-3 rounded-lg border-2 border-muted bg-card p-3 hover:bg-accent hover:text-accent-foreground cursor-pointer transition-all duration-200 hover:shadow-md',
                                field.value === 'boleto' && 'border-primary bg-primary/5 shadow-sm ring-1 ring-primary/20',
                              )}
                            >
                              <RadioGroupItem value="boleto" />
                              <Banknote className="h-8 w-8 text-primary flex-shrink-0" />
                              <div className="flex-1">
                                <div className="flex items-center gap-2">
                                  <span className="font-semibold">Boleto Bancário</span>
                                </div>
                                <p className="text-xs text-muted-foreground mt-0.5">
                                  Qualquer banco • 3 dias úteis
                                </p>
                              </div>
                              <div className="text-right text-xs">
                                <div className="font-medium">3 dias</div>
                              </div>
                            </Label>
                          </RadioGroup>
                        </FormControl>
                        <FormMessage className="pt-2" />
                      </FormItem>
                    )}
                  />

                  {/* Indicadores de Segurança */}
                  <div className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 border border-green-200 dark:border-green-800 rounded-lg p-3 mt-4">
                    <div className="flex items-center justify-center gap-6 text-xs">
                      <div className="flex items-center gap-1 text-green-700 dark:text-green-300">
                        <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
                        </svg>
                        <span className="font-medium">SSL 256-bit</span>
                      </div>
                      <div className="flex items-center gap-1 text-blue-700 dark:text-blue-300">
                        <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                        <span className="font-medium">PCI Compliant</span>
                      </div>
                      <div className="flex items-center gap-1 text-purple-700 dark:text-purple-300">
                        <div className="h-4 w-4 bg-purple-600 rounded text-white text-xs flex items-center justify-center font-bold">C</div>
                        <span className="font-medium">Gateway Cielo</span>
                      </div>
                    </div>
                    <p className="text-center text-xs text-muted-foreground mt-2">
                      🔒 Dados protegidos por criptografia • Não armazenamos informações de cartão
                    </p>
                  </div>
                </div>
              </div>

              <Separator />

              {!showPaymentDetails && (
                <>        {/* Resumo e Botão */}
                  <div className="bg-muted/30 rounded-lg p-4">
                    <div className="flex flex-col sm:flex-row gap-3 justify-between items-center">
                      <div className="text-center sm:text-left">
                        {amount > 0 && (
                          <div>
                            <p className="text-xs text-muted-foreground">Valor da contribuição:</p>
                            <p className="text-xl font-bold text-foreground">R$ {Number(amount).toFixed(2)}</p>
                            {form.watch('contributionType') && (
                              <p className="text-xs text-muted-foreground capitalize">
                                {form.watch('contributionType')}
                              </p>
                            )}
                          </div>
                        )}
                      </div>
                      <Button
                        type="submit"
                        size="lg"
                        disabled={isProcessing || !amount || amount <= 0}
                        className="min-w-[180px] h-10 font-semibold"
                      >
                        {isProcessing && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        {isProcessing ? 'Processando...' : (
                          <>
                            <svg className="mr-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 616 0z" clipRule="evenodd" />
                            </svg>
                            Prosseguir com Segurança
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                </>
              )}
              </form>
            </Form>
          ) : null}

          {showPaymentDetails && (
            <>
              {paymentMethod === 'credit_card' && (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                  {/* Visualização do Cartão */}
                  <div className="flex justify-center items-center bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 rounded-lg p-6">
                    <Cards
                      number={cardState.number}
                      expiry={cardState.expiry}
                      cvc={cardState.cvc}
                      name={cardState.name}
                      focused={cardState.focus}
                    />
                  </div>

                  {/* Formulário do Cartão */}
                  <div className="flex flex-col justify-center space-y-4">
                    <div className="text-center lg:text-left mb-4">
                      <h3 className="text-lg font-semibold mb-2 flex items-center justify-center lg:justify-start gap-2">
                        <CreditCard className="h-5 w-5 text-primary" />
                        Dados do Cartão
                      </h3>
                      <p className="text-sm text-muted-foreground">
                        Preencha as informações do seu cartão de crédito
                      </p>
                    </div>

                    <div className="space-y-3">
                      <Input
                        type="text"
                        name="number"
                        placeholder="Número do Cartão"
                        value={cardState.number}
                        onChange={handleInputChange}
                        onFocus={handleInputFocus}
                        className="text-center font-mono"
                      />
                      <Input
                        type="text"
                        name="name"
                        placeholder="Nome no Cartão"
                        value={cardState.name}
                        onChange={handleInputChange}
                        onFocus={handleInputFocus}
                        className="text-center"
                      />
                      <div className="grid grid-cols-2 gap-3">
                        <Input
                          type="text"
                          name="expiry"
                          placeholder="MM/AA"
                          value={cardState.expiry}
                          onChange={handleInputChange}
                          onFocus={handleInputFocus}
                          className="text-center font-mono"
                        />
                        <Input
                          type="text"
                          name="cvc"
                          placeholder="CVC"
                          value={cardState.cvc}
                          onChange={handleInputChange}
                          onFocus={handleInputFocus}
                          className="text-center font-mono"
                        />
                      </div>
                      
                      <div className="bg-green-50 dark:bg-green-950 border border-green-200 dark:border-green-800 rounded-lg p-3 mt-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm font-medium text-green-700 dark:text-green-300">
                              Total a pagar
                            </p>
                            <p className="text-lg font-bold text-green-800 dark:text-green-200">
                              R$ {Number(amount).toFixed(2)}
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="text-xs text-green-600 dark:text-green-400">
                              Parcelamento disponível
                            </p>
                            <p className="text-xs text-green-600 dark:text-green-400">
                              até 12x sem juros
                            </p>
                          </div>
                        </div>
                      </div>

                      <Button
                        onClick={handleFinalizeCardPayment}
                        className="w-full mt-4"
                        size="lg"
                        disabled={isProcessing}
                      >
                        {isProcessing && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        {isProcessing ? 'Processando...' : `Pagar R$ ${Number(amount).toFixed(2)}`}
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {paymentMethod === 'pix' && paymentDetails && pixStatus === 'pending' && (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                  {/* QR Code */}
                  <div className="flex flex-col items-center justify-center bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20 rounded-lg p-6">
                    <div className="bg-white p-3 rounded-lg shadow-sm mb-4">
                      {qrCodeSrc ? (
                        <Image
                          src={qrCodeSrc}
                          width={200}
                          height={200}
                          alt="QR Code Pix"
                          className="rounded-lg"
                        />
                      ) : (
                        <Skeleton className="h-[200px] w-[200px] rounded-lg" />
                      )}
                    </div>
                    <p className="text-sm text-center text-muted-foreground">
                      Escaneie com o app do seu banco
                    </p>
                  </div>

                  {/* Chave PIX e Instruções */}
                  <div className="flex flex-col justify-center space-y-4">
                    <div className="text-center lg:text-left">
                      <h3 className="text-lg font-semibold mb-2 flex items-center justify-center lg:justify-start gap-2">
                        <QrCode className="h-5 w-5 text-primary" />
                        Pagamento via PIX
                      </h3>
                      <p className="text-sm text-muted-foreground mb-4">
                        Use uma das opções abaixo para finalizar seu pagamento
                      </p>
                    </div>

                    <div className="space-y-3">
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">Chave PIX:</Label>
                        <div className="flex gap-2 mt-1">
                          <Input
                            value={paymentDetails.QrCodeString}
                            readOnly
                            className="font-mono text-xs"
                          />
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleCopy(paymentDetails.QrCodeString, 'Pix')}
                            className="px-3"
                          >
                            <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                          </Button>
                        </div>
                      </div>

                      <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-3">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                            <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                              Aguardando pagamento
                            </span>
                          </div>
                          <div className="flex items-center gap-1">
                            <svg className="h-4 w-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span className={cn(
                              "text-sm font-mono font-bold",
                              pixCountdown <= 30 ? "text-red-600 dark:text-red-400" : "text-blue-700 dark:text-blue-300"
                            )}>
                              {formatCountdown(pixCountdown)}
                            </span>
                          </div>
                        </div>
                        
                        {/* Barra de Progresso */}
                        <div className="mb-2">
                          <div className="w-full bg-blue-200 dark:bg-blue-800 rounded-full h-1.5">
                            <div 
                              className={cn(
                                "h-1.5 rounded-full transition-all duration-1000 ease-linear",
                                pixCountdown <= 30 ? "bg-red-500" : "bg-blue-500"
                              )}
                              style={{ width: `${(pixCountdown / 180) * 100}%` }}
                            ></div>
                          </div>
                        </div>

                        <div className="flex items-center justify-between">
                          <p className="text-xs text-blue-600 dark:text-blue-400 flex-1">
                            {pixCountdown <= 30 
                              ? "⚠️ Tempo quase esgotado! Complete o pagamento rapidamente."
                              : "Verificando automaticamente na Cielo a cada poucos segundos..."
                            }
                          </p>
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={checkPaymentManually}
                            disabled={isProcessing}
                            className="ml-2 text-xs px-2 py-1 h-6"
                          >
                            {isProcessing ? (
                              <Loader2 className="h-3 w-3 animate-spin" />
                            ) : (
                              <>
                                <svg className="h-3 w-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                                </svg>
                                Verificar
                              </>
                            )}
                          </Button>
                        </div>
                      </div>

                      <div className="text-center lg:text-left">
                        <p className="text-xs text-muted-foreground">
                          💡 <strong>Dica:</strong> Já fez o pagamento? Clique em "Verificar" para consultar o status na Cielo
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {pixStatus === 'expired' && (
                <div className="mt-6 bg-gradient-to-br from-red-50 to-red-100 dark:from-red-950 dark:to-red-900 border border-red-200 dark:border-red-800 rounded-lg p-6 text-center">
                  <div className="bg-red-100 dark:bg-red-900 p-3 rounded-full w-fit mx-auto mb-4">
                    <svg className="h-8 w-8 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-semibold text-red-800 dark:text-red-200 mb-2">
                    Tempo Esgotado
                  </h3>
                  <p className="text-sm text-red-700 dark:text-red-300 mb-4">
                    O tempo para pagamento via PIX expirou. Gere um novo código para continuar.
                  </p>
                  <Button
                    onClick={() => {
                      setPixStatus('idle')
                      setShowPaymentDetails(false)
                      setPaymentDetails(null)
                      setTransactionId(null)
                      setCurrentStep(1)
                      setPixCountdown(180)
                    }}
                    variant="outline"
                    className="border-red-300 text-red-700 hover:bg-red-50 dark:border-red-700 dark:text-red-300 dark:hover:bg-red-950"
                  >
                    Gerar Novo PIX
                  </Button>
                </div>
              )}

              {pixStatus === 'confirmed' && (
                <Card className="bg-gradient-to-br from-green-50 to-green-100 border-green-200 dark:from-green-950 dark:to-green-900 dark:border-green-800 mt-8">
                  <CardContent className="flex flex-col items-center justify-center p-10 text-center">
                    <div className="bg-green-100 dark:bg-green-900 p-4 rounded-full mb-6">
                      <CheckCircle className="h-16 w-16 text-green-600 dark:text-green-400" />
                    </div>
                    <h2 className="text-2xl font-bold mb-2 text-green-800 dark:text-green-200">
                      Pagamento Confirmado!
                    </h2>
                    <p className="text-green-700 dark:text-green-300 mb-2">
                      Sua contribuição de <span className="font-semibold">R$ {Number(amount).toFixed(2)}</span> foi recebida com sucesso.
                    </p>
                    <p className="text-sm text-green-600 dark:text-green-400 mb-6">
                      Obrigado por contribuir com o ministério!
                    </p>
                    <Button
                      onClick={() => {
                        form.reset({
                          amount: 0,
                          paymentMethod: 'pix',
                          contributionType: undefined,
                          description: '',
                        })
                        setShowPaymentDetails(false)
                        setPaymentDetails(null)
                        setTransactionId(null)
                        setPixStatus('idle')
                        setPixCountdown(180)
                        setCurrentStep(1)
                      }}
                      className="mt-2"
                    >
                      Fazer Nova Contribuição
                    </Button>
                  </CardContent>
                </Card>
              )}

              {paymentMethod === 'boleto' && paymentDetails && (
                <div className="mt-6 space-y-6">
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2 flex items-center justify-center gap-2">
                      <Banknote className="h-5 w-5 text-primary" />
                      Boleto Bancário Gerado
                    </h3>
                    <p className="text-sm text-muted-foreground">
                      Use uma das opções abaixo para efetuar o pagamento
                    </p>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* Código de Barras */}
                    <div className="bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900 border border-orange-200 dark:border-orange-800 rounded-lg p-6">
                      <div className="space-y-4">
                        <div className="text-center">
                          <div className="bg-orange-100 dark:bg-orange-900 p-3 rounded-full w-fit mx-auto mb-3">
                            <Banknote className="h-8 w-8 text-orange-600 dark:text-orange-400" />
                          </div>
                          <h4 className="font-semibold text-orange-800 dark:text-orange-200 mb-2">
                            Código de Barras
                          </h4>
                        </div>
                        
                        <div className="space-y-2">
                          <Label className="text-xs font-medium text-orange-700 dark:text-orange-300">
                            Linha digitável:
                          </Label>
                          <div className="flex gap-2">
                            <Input
                              value={paymentDetails.DigitableLine}
                              readOnly
                              className="font-mono text-xs bg-white dark:bg-orange-950"
                            />
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleCopy(paymentDetails.DigitableLine, 'Boleto')}
                              className="px-3"
                            >
                              <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                              </svg>
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Instruções e Download */}
                    <div className="flex flex-col justify-center space-y-4">
                      <div className="space-y-4">
                        <div className="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                          <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-2">
                            Como pagar:
                          </h4>
                          <ul className="text-sm text-blue-700 dark:text-blue-300 space-y-1">
                            <li>• Acesse o app ou site do seu banco</li>
                            <li>• Escolha "Pagar boleto"</li>
                            <li>• Digite o código ou baixe o PDF</li>
                            <li>• Confirme o pagamento</li>
                          </ul>
                        </div>

                        <Button asChild className="w-full" size="lg">
                          <a href={paymentDetails.Url} target="_blank" rel="noopener noreferrer">
                            <svg className="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            Baixar Boleto PDF
                          </a>
                        </Button>

                        <div className="bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-lg p-3">
                          <div className="flex items-start gap-2">
                            <svg className="h-4 w-4 text-amber-600 dark:text-amber-400 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                            </svg>
                            <div>
                              <p className="text-xs font-medium text-amber-800 dark:text-amber-200">
                                Importante:
                              </p>
                              <p className="text-xs text-amber-700 dark:text-amber-300">
                                Vencimento em 3 dias úteis. Confirmação em até 2 dias após pagamento.
                              </p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>
    </div>
  )
}